command: ./svcat
name: svcat
shortDesc: The Kubernetes Service Catalog Command-Line Interface (CLI)
tree:
- command: ./svcat bind
  example: "  svcat bind wordpress\n  svcat bind wordpress-mysql-instance --name wordpress-mysql-binding
    --secret-name wordpress-mysql-secret\n  svcat bind wordpress-mysql-instance --name
    wordpress-mysql-binding --external-id c8ca2fcc-4398-11e8-842f-0ed5f89f718b\n  svcat
    bind wordpress-instance --params type=admin\n  svcat bind wordpress-instance --params-json
    '{\n  \t\"type\": \"admin\",\n  \t\"teams\": [\n  \t\t\"news\",\n  \t\t\"weather\",\n
    \ \t\t\"sports\"\n  \t]\n  }'"
  flags:
  - desc: The ID of the binding for use with OSB API (Optional)
    name: external-id
  - desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
    name: interval
  - desc: The name of the binding. Defaults to the name of the instance.
    name: name
  - desc: 'Additional parameter to use when binding the instance, format: NAME=VALUE.
      Cannot be combined with --params-json, Sensitive information should be placed
      in a secret and specified with --secret'
    name: param
    shorthand: p
  - desc: Additional parameters to use when binding the instance, provided as a JSON
      object. Cannot be combined with --param
    name: params-json
  - desc: 'Additional parameter, whose value is stored in a secret, to use when binding
      the instance, format: SECRET[KEY]'
    name: secret
  - desc: The name of the secret. Defaults to the name of the instance.
    name: secret-name
  - desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
    name: timeout
  - desc: Wait until the operation completes.
    name: wait
  name: bind
  shortDesc: Binds an instance's metadata to a secret, which can then be used by an
    application to connect to the instance
  use: bind INSTANCE_NAME
- command: ./svcat completion
  example: "  # Install bash completion on a Mac using homebrew\n  brew install bash-completion\n
    \ printf \"\\n# Bash completion support\\nsource $(brew --prefix)/etc/bash_completion\\n\"
    >> $HOME/.bash_profile\n  source $HOME/.bash_profile\n  \n  # Load the svcat completion
    code for the specified shell (bash or zsh)\n  source <(svcat completion bash)\n
    \ \n  # Write bash completion code to a file and source if from .bash_profile\n
    \ svcat completion bash > ~/.svcat/svcat_completion.bash.inc\n  printf \"\\n#
    Svcat shell completion\\nsource '$HOME/.svcat/svcat_completion.bash.inc'\\n\"
    >> $HOME/.bash_profile\n  source $HOME/.bash_profile"
  longDesc: "\nOutput shell completion code for the specified shell (bash or zsh).\nThe
    shell code must be evaluated to provide interactive\ncompletion of svcat commands.
    This can be done by sourcing it from\nthe .bash_profile.\n\nNote: this requires
    the bash-completion framework, which is not installed\nby default on Mac. This
    can be installed by using homebrew:\n\n\t$ brew install bash-completion\n\nOnce
    installed, bash_completion must be evaluated. This can be done by adding the\nfollowing
    line to the .bash_profile\n\n\t$ source $(brew --prefix)/etc/bash_completion\n\nNote
    for zsh users: zsh completions are only supported in versions of zsh >= 5.2\n"
  name: completion
  shortDesc: Output shell completion code for the specified shell (bash or zsh).
  use: completion SHELL
- command: ./svcat create
  name: create
  shortDesc: Create a user-defined resource
  tree:
  - command: ./svcat create class
    example: |2-
        svcat create class newclass --from mysqldb
        svcat create class newclass --from mysqldb --scope cluster
        svcat create class newclass --from mysqldb --scope namespace --namespace newnamespace
    flags:
    - desc: Name from an existing class that will be copied (Required)
      name: from
      shorthand: f
    - desc: 'Limit the command to a particular scope: cluster or namespace'
      name: scope
    name: class
    shortDesc: Copies an existing class into a new user-defined cluster-scoped class
    use: class [NAME] --from [EXISTING_NAME]
  use: create
- command: ./svcat deprovision
  example: '  svcat deprovision wordpress-mysql-instance'
  flags:
  - desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
    name: interval
  - desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
    name: timeout
  - desc: Wait until the operation completes.
    name: wait
  name: deprovision
  shortDesc: Deletes an instance of a service
  use: deprovision NAME
- command: ./svcat deregister
  example: |2-
      svcat deregister mysqlbroker
      svcat deregister mysqlbroker --namespace=mysqlnamespace
      svcat deregister mysqlclusterbroker --cluster
  flags:
  - desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
    name: interval
  - desc: 'Limit the command to a particular scope: cluster or namespace'
    name: scope
  - desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
    name: timeout
  - desc: Wait until the operation completes.
    name: wait
  name: deregister
  shortDesc: Deregisters an existing broker with service catalog
  use: deregister NAME
- command: ./svcat describe
  name: describe
  shortDesc: Show details of a specific resource
  tree:
  - command: ./svcat describe binding
    example: '  svcat describe binding wordpress-mysql-binding'
    flags:
    - desc: Output the decoded secret values. By default only the length of the secret
        is displayed
      name: show-secrets
    name: binding
    shortDesc: Show details of a specific binding
    use: binding NAME
  - command: ./svcat describe broker
    example: '  svcat describe broker asb'
    name: broker
    shortDesc: Show details of a specific broker
    use: broker NAME
  - command: ./svcat describe class
    example: |2-
        svcat describe class mysqldb
        svcat describe class --kube-name 997b8372-8dac-40ac-ae65-758b4a5075a5
    flags:
    - desc: Whether or not to get the class by its Kubernetes Name (the default is
        by external name)
      name: kube-name
      shorthand: k
    name: class
    shortDesc: Show details of a specific class
    use: class NAME
  - command: ./svcat describe instance
    example: '  svcat describe instance wordpress-mysql-instance'
    name: instance
    shortDesc: Show details of a specific instance
    use: instance NAME
  - command: ./svcat describe plan
    example: |2-
        svcat describe plan standard800
        svcat describe plan --kube-name 08e4b43a-36bc-447e-a81f-8202b13e339c
        svcat describe plan PLAN_NAME --scope cluster
        svcat describe plan PLAN_NAME --scope namespace --namespace NAMESPACE_NAME
    flags:
    - desc: Whether or not to get the class by its Kubernetes name (the default is
        by external name)
      name: kube-name
      shorthand: k
    - desc: 'Limit the command to a particular scope: cluster or namespace'
      name: scope
    - desc: Whether or not to show instance and binding parameter schemas
      name: show-schemas
    name: plan
    shortDesc: Show details of a specific plan
    use: plan NAME
  use: describe
- command: ./svcat get
  name: get
  shortDesc: List a resource, optionally filtered by name
  tree:
  - command: ./svcat get bindings
    example: |2-
        svcat get bindings
        svcat get bindings --all-namespaces
        svcat get binding wordpress-mysql-binding
        svcat get binding -n ci concourse-postgres-binding
    flags:
    - desc: If present, list the requested object(s) across all namespaces. Namespace
        in current context is ignored even if specified with --namespace
      name: all-namespaces
    - desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
      name: output
      shorthand: o
    name: bindings
    shortDesc: List bindings, optionally filtered by name or namespace
    use: bindings [NAME]
  - command: ./svcat get brokers
    example: |2-
        svcat get brokers
        svcat get brokers --scope=cluster
        svcat get brokers --scope=all
        svcat get broker minibroker
    flags:
    - desc: If present, list the requested object(s) across all namespaces. Namespace
        in current context is ignored even if specified with --namespace
      name: all-namespaces
    - desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
      name: output
      shorthand: o
    - desc: 'Limit the command to a particular scope: cluster, namespace or all'
      name: scope
    name: brokers
    shortDesc: List brokers, optionally filtered by name, scope or namespace
    use: brokers [NAME]
  - command: ./svcat get classes
    example: |2-
        svcat get classes
        svcat get classes --scope cluster
        svcat get classes --scope namespace --namespace dev
        svcat get class mysqldb
        svcat get class --kube-name 997b8372-8dac-40ac-ae65-758b4a5075a5
    flags:
    - desc: If present, list the requested object(s) across all namespaces. Namespace
        in current context is ignored even if specified with --namespace
      name: all-namespaces
    - desc: Whether or not to get the class by its Kubernetes name (the default is
        by external name)
      name: kube-name
      shorthand: k
    - desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
      name: output
      shorthand: o
    - desc: 'Limit the command to a particular scope: cluster, namespace or all'
      name: scope
    name: classes
    shortDesc: List classes, optionally filtered by name, scope or namespace
    use: classes [NAME]
  - command: ./svcat get instances
    example: |2-
        svcat get instances
        svcat get instances --class redis
        svcat get instances --plan default
        svcat get instances --all-namespaces
        svcat get instance wordpress-mysql-instance
        svcat get instance -n ci concourse-postgres-instance
    flags:
    - desc: If present, list the requested object(s) across all namespaces. Namespace
        in current context is ignored even if specified with --namespace
      name: all-namespaces
    - desc: If present, specify the class used as a filter for this request
      name: class
      shorthand: c
    - desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
      name: output
      shorthand: o
    - desc: If present, specify the plan used as a filter for this request
      name: plan
      shorthand: p
    name: instances
    shortDesc: List instances, optionally filtered by name
    use: instances [NAME]
  - command: ./svcat get plans
    example: |2-
        svcat get plans
        svcat get plans --scope cluster
        svcat get plans --scope namespace --namespace dev
        svcat get plan PLAN_NAME
        svcat get plan CLASS_NAME/PLAN_NAME
        svcat get plan --kube-name PLAN_KUBE_NAME
        svcat get plans --class CLASS_NAME
        svcat get plan --class CLASS_NAME PLAN_NAME
        svcat get plans --kube-name --class CLASS_KUBE_NAME
        svcat get plan --kube-name --class CLASS_KUBE_NAME PLAN_KUBE_NAME
    flags:
    - desc: If present, list the requested object(s) across all namespaces. Namespace
        in current context is ignored even if specified with --namespace
      name: all-namespaces
    - desc: Filter plans based on class. When --kube-name is specified, the class
        name is interpreted as a kubernetes name.
      name: class
      shorthand: c
    - desc: Whether or not to get the plan by its Kubernetes name (the default is
        by external name)
      name: kube-name
      shorthand: k
    - desc: The output format to use. Valid options are table, json or yaml. If not
        present, defaults to table
      name: output
      shorthand: o
    - desc: 'Limit the command to a particular scope: cluster, namespace or all'
      name: scope
    name: plans
    shortDesc: List plans, optionally filtered by name, class, scope or namespace
    use: plans [NAME]
  use: get
- command: ./svcat marketplace
  example: "  svcat marketplace\n  \tsvcat marketplace --namespace dev"
  flags:
  - desc: If present, list the requested object(s) across all namespaces. Namespace
      in current context is ignored even if specified with --namespace
    name: all-namespaces
  - desc: The output format to use. Valid options are table, json or yaml. If not
      present, defaults to table
    name: output
    shorthand: o
  name: marketplace
  shortDesc: List available service offerings
  use: marketplace
- command: ./svcat provision
  example: |2-
      svcat provision wordpress-mysql-instance --class mysqldb --plan free -p location=eastus -p sslEnforcement=disabled
      svcat provision wordpress-mysql-instance --external-id a7c00676-4398-11e8-842f-0ed5f89f718b --class mysqldb --plan free
      svcat provision wordpress-mysql-instance --class mysqldb --plan free -s mysecret[dbparams]
      svcat provision secure-instance --class mysqldb --plan secureDB --params-json '{
        "encrypt" : true,
        "firewallRules" : [
            {
                "name": "AllowSome",
                "startIPAddress": "75.70.113.50",
                "endIPAddress" : "75.70.113.131"
            }
        ]
      }'
  flags:
  - desc: The class name (Required)
    name: class
  - desc: The ID of the instance for use with the OSB SB API (Optional)
    name: external-id
  - desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
    name: interval
  - desc: 'Additional parameter to use when provisioning the service, format: NAME=VALUE.
      Cannot be combined with --params-json, Sensitive information should be placed
      in a secret and specified with --secret'
    name: param
    shorthand: p
  - desc: Additional parameters to use when provisioning the service, provided as
      a JSON object. Cannot be combined with --param
    name: params-json
  - desc: The plan name (Required)
    name: plan
  - desc: 'Additional parameter, whose value is stored in a secret, to use when provisioning
      the service, format: SECRET[KEY]'
    name: secret
  - desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
    name: timeout
  - desc: Wait until the operation completes.
    name: wait
  name: provision
  shortDesc: Create a new instance of a service
  use: provision NAME --plan PLAN --class CLASS
- command: ./svcat register
  example: '  svcat register mysqlbroker --url http://mysqlbroker.com'
  flags:
  - desc: A secret containing basic auth (username/password) information to connect
      to the broker
    name: basic-secret
  - desc: A secret containing a bearer token to connect to the broker
    name: bearer-secret
  - desc: A file containing the CA certificate to connect to the broker
    name: ca
  - desc: A list of restrictions to apply to the classes allowed from the broker
    name: class-restrictions
  - desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
    name: interval
  - desc: A list of restrictions to apply to the plans allowed from the broker
    name: plan-restrictions
  - desc: Behavior for relisting the broker's catalog. Valid options are manual or
      duration. Defaults to duration with an interval of 15m.
    name: relist-behavior
  - desc: 'Interval to refetch broker catalog when relist-behavior is set to duration,
      specified in human readable format: 30s, 1m, 1h'
    name: relist-duration
  - desc: 'Limit the command to a particular scope: cluster or namespace'
    name: scope
  - desc: Disables TLS certificate verification when communicating with this broker.
      This is strongly discouraged. You should use --ca instead.
    name: skip-tls
  - desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
    name: timeout
  - desc: The broker URL (Required)
    name: url
  - desc: Wait until the operation completes.
    name: wait
  name: register
  shortDesc: Registers a new broker with service catalog
  use: register NAME --url URL
- command: ./svcat sync
  name: sync
  shortDesc: Syncs service catalog for a service broker
  tree:
  - command: ./svcat sync broker
    example: '  svcat sync broker asb'
    flags:
    - desc: 'Limit the command to a particular scope: cluster or namespace'
      name: scope
    name: broker
    shortDesc: Syncs service catalog for a service broker
    use: broker NAME
  use: sync
- command: ./svcat touch
  name: touch
  shortDesc: Force Service Catalog to reprocess a resource
  tree:
  - command: ./svcat touch instance
    example: '  svcat touch instance wordpress-mysql-instance --namespace mynamespace'
    longDesc: "Touch instance will increment the updateRequests field on the instance.
      \nThen, service catalog will process the instance's spec again. It might do
      an update, a delete, or \nnothing."
    name: instance
    shortDesc: Touch an instance to make service-catalog try to process the spec again
    use: instance
  use: touch
- command: ./svcat unbind
  example: |2-
      svcat unbind wordpress-mysql-instance
      svcat unbind --name wordpress-mysql-binding
  flags:
  - desc: 'Poll interval for --wait, specified in human readable format: 30s, 1m,
      1h'
    name: interval
  - desc: The name of the binding to remove
    name: name
  - desc: 'Timeout for --wait, specified in human readable format: 30s, 1m, 1h. Specify
      -1 to wait indefinitely.'
    name: timeout
  - desc: Wait until the operation completes.
    name: wait
  name: unbind
  shortDesc: Unbinds an instance. When an instance name is specified, all of its bindings
    are removed, otherwise use --name to remove a specific binding
  use: unbind INSTANCE_NAME
- command: ./svcat version
  example: |2-
      svcat version
      svcat version --client
  flags:
  - desc: Show only the client version
    name: client
    shorthand: c
  name: version
  shortDesc: Provides the version for the Service Catalog client and server
  use: version
use: svcat
